# Add upstream for letsencrypt job
#upstream letsencrypt {
#  server letsencrypt:80 max_fails=0 fail_timeout=1s;
#}

# Upstream Services
upstream swoole {
    server laravel:8000;
    server localhost:8000 backup;

    proxy_next_upstream error timeout;
    proxy_next_upstream_tries 3;
}

upstream soketi {
    server websocket:6001;
    server localhost:6001 backup;

    proxy_next_upstream error timeout;
    proxy_next_upstream_tries 3;
}

# Mapping
map $http_upgrade $backend {
    default http://swoole;
    websocket http://soketi;
}

## Connection type
map $http_upgrade:$scheme $connection_upgrade {
    default upgrade;
    "websocket:http" ws;
    "websocket:https" wss;
}


# Server block for HTTP traffic on port 80
server {
    listen 80;  # Listen for connections on port 80
    server_name _ localhost;  # Catch all domains including localhost
    root /var/www/public;  # Root directory for the server


    # Server logs
    access_log off;
    error_log  /var/log/nginx/error.log error;
    error_page 404 /index.php;

    include /etc/nginx/snippets/common.conf;

    ## Block the robots
    if ($blocked_bots = 1) {
            return 444;
    }

    if ($scanners = 1) {
            return 444;
    }


    include /etc/nginx/snippets/locations.conf;
}




server {
    listen 443 ssl; # Listen for ssl connections on port 443
    server_name _ localhost;  # Catch all domains including localhost
    root /var/www/public;  # Root directory for the server

    # Server logs
    access_log off;
    error_log  /var/log/nginx/ssl_error.log;

    # Include common configs and ssl
    include /etc/nginx/snippets/common.conf;
    include /etc/nginx/snippets/ssl.conf;

    ## Block the robots
    if ($blocked_bots = 1) {
            return 444;
    }

    if ($scanners = 1) {
            return 444;
    }

    include /etc/nginx/snippets/locations.conf;
}